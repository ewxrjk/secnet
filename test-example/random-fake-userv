#!/usr/bin/perl -w
#
# stunt userv-ipif standin which generates random data
#
# This file is part of secnet.
# See README for full list of copyright holders.
#
# secnet is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# secnet is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# version 3 along with secnet; if not, see
# https://www.gnu.org/licenses/gpl.html.

use strict;
use POSIX;

open R, '/dev/urandom' or die $!;

system 'cat >/dev/null &';

sub randbytes ($) {
    my ($count) = @_;
    my $s;
    my $r = read R, $s, $count;
    die $! unless $r==$count;
    return $s;
}

sub randbyteval () {
    my $b = randbytes 1;
    my ($r) = unpack 'C', $b;
    return $r;
}

sub randvalue ($$) {
    my ($min,$maxplus1) = @_;
    my $b = randbyteval;
    return floor(($b/256.0) * ($maxplus1-$min)) + $min;
}

for (;;) {
    my $lenbits = randvalue 0,14;
    my $len= (randbyteval << 8) | randbyteval;
    $len &= (1 << $lenbits)-1;
    my $data = randbytes $len;
    if (randbyteval >= 0x80) {
	$data =~ s{[\xc0\xdb]}{
            $& eq "\xc0" ? "\xcb\xdc" :
            $& eq "\xdb" ? "\xcb\xdd" :
            die
        }ge;
    }
    print "\xc0";
    print $data;
    STDOUT->flush;
}
